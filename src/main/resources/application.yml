server:
  port: ${SERVER_PORT:9050}
spring:
  application:
    name: tech_challenge_hospital
  profiles:
    active: default

---
spring:
  config:
    activate:
      on-profile: default

  graphql: # Fornece interface para testar requisicoes GraphQL
    graphiql:
      enabled: true # localhost:8080/graphiql

  devtools:
    restart:
      additional-exclude: logs/**

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    defer-datasource-initialization: true
    show-sql: true

#  datasource:
#    driver-class-name: org.postgresql.Driver
#    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:challenge_hospital}
#    username: ${DB_USERNAME:postgres}
#    password: ${DB_PASSWORD:postgres}
#  jpa:
#    hibernate:
#      ddl-auto: create-drop
#      naming:
#        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#    defer-datasource-initialization: true
#    properties:
#      hibernate:
#        format_sql: true
#        use_sql_comments: true
#        connection:
#          isolation: 2
#        cache:
#          use_second_level_cache: false
#          use_query_cache: false
#        type:
#          enumType:
#            type: pgsql_enum
#    open-in-view: false
#    show-sql: true

  sql: # Esta propriedade controla quando e como o Spring Boot inicializa o banco de dados com scripts SQL
    init:
      mode: always
      data-locations: classpath:db/data.sql

  security: # Configuracao do Sprint Security
    form-login:
      page: /login # Define a URL personalizada (caso precise ser usada em outra parte do sistema)

  messages: # Configuracao de mensagem para login personalizado
    basename: messages

logging:
  level:
    org:
      springframework:
        security: DEBUG # configuracao de log

