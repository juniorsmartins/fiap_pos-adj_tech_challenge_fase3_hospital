#type Role {
#    id: ID!,
#    nome: String!
#}

#type User {
#    id: ID!,
#    username: String!
#    password: String!
#    enabled: Boolean!
#    roles: [RoleDao!]!
#}

input UserRequestDto {
    username: String!
    password: String!
}

input PacienteRequestDto {
    nome: String!
    user: UserRequestDto!
}

input MedicoRequestDto {
    nome: String!
    user: UserRequestDto!
}

input EnfermeiroRequestDto {
    nome: String!
    user: UserRequestDto!
}


#type Paciente {
#    id: ID!
#    nome: String!
#}
#
#type Medico {
#    id: ID!
#    nome: String!
#}


type RoleResponseDto {
    id: ID
    name: String
}

type UserResponseDto {
    id: ID
    username: String
    password: String
    enabled: Boolean
    roles: [RoleResponseDto]
}

type PacienteResponseDto {
    id: ID
    nome: String
    user: UserResponseDto
}

type MedicoResponseDto {
    id: ID
    nome: String
    user: UserResponseDto
}

type EnfermeiroResponseDto {
    id: ID
    nome: String
    user: UserResponseDto
}


type Query {
    consultarPacientePorId(id: ID!): PacienteResponseDto
    consultarMedicoPorId(id: ID!): MedicoResponseDto
    consultarEnfermeiroPorId(id: ID!): EnfermeiroResponseDto
}

type Mutation {
    criarPaciente(request: PacienteRequestDto): PacienteResponseDto
    apagarPaciente(id: ID!): Boolean!
    atualizarPaciente(id: ID!, request: PacienteRequestDto): PacienteResponseDto!
    criarMedico(request: MedicoRequestDto): MedicoResponseDto
    apagarMedico(id: ID!): Boolean!
    atualizarMedico(id: ID!, request: MedicoRequestDto): MedicoResponseDto!
    criarEnfermeiro(request: EnfermeiroRequestDto): EnfermeiroResponseDto
    apagarEnfermeiro(id: ID!): Boolean!
    atualizarEnfermeiro(id: ID!, request: EnfermeiroRequestDto): EnfermeiroResponseDto!
}

